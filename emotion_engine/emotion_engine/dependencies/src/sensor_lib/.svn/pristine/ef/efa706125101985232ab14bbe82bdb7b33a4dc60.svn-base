// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (dd8a096f).
//
// o:\mark\ttlexplorer\debug\TTLLiveCtrl.tlh
//
// C++ source equivalent of Win32 type library O:\Steeve\system\TTLAPI1\TTLLiveCtrl.dll
// compiler-generated file created 03/15/04 at 09:25:17 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("b8bf3523-0a10-44ad-9ef5-f16a02ea9fb1"))
/* dispinterface */ _ITTLLiveEvents;
struct /* coclass */ TTLLive;
struct __declspec(uuid("5037f1e7-3676-4306-8c82-23dc12133098"))
/* dual interface */ ITTLLive;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_ITTLLiveEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ITTLLive, __uuidof(ITTLLive));

//
// Type library items
//

struct __declspec(uuid("b8bf3523-0a10-44ad-9ef5-f16a02ea9fb1"))
_ITTLLiveEvents : IDispatch
{};

struct __declspec(uuid("897b372a-f588-4143-aa5d-3414d1dbc42e"))
TTLLive;
    // [ default ] interface ITTLLive
    // [ default, source ] dispinterface _ITTLLiveEvents

struct __declspec(uuid("5037f1e7-3676-4306-8c82-23dc12133098"))
ITTLLive : IDispatch
{
    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_EncoderCount (
        long * pliEncoderCount ) = 0;
    virtual HRESULT __stdcall get_ChannelCount (
        long * pliChannelCount ) = 0;
    virtual HRESULT __stdcall get_Version (
        long * plibmVersion ) = 0;
    virtual HRESULT __stdcall get_BatteryLevelPct (
        long liEncoderHND,
        float * pfBatteryLevelPct ) = 0;
    virtual HRESULT __stdcall get_ConnectionName (
        long liEncoderHND,
        BSTR * pbstrConnectionName ) = 0;
    virtual HRESULT __stdcall get_ConnectionType (
        long liEncoderHND,
        long * pliConnectionType ) = 0;
    virtual HRESULT __stdcall get_EncoderChannelCount (
        long liEncoderHND,
        long * pliEncoderChannelCount ) = 0;
    virtual HRESULT __stdcall get_EncoderModelName (
        long liEncoderHND,
        BSTR * pbstrEncoderModelName ) = 0;
    virtual HRESULT __stdcall get_EncoderModelType (
        long liEncoderHND,
        long * pliEncoderModelType ) = 0;
    virtual HRESULT __stdcall get_FirmwareVersion (
        long liEncoderHND,
        long * plibmFirmwareVersion ) = 0;
    virtual HRESULT __stdcall get_HardwareVersion (
        long liEncoderHND,
        long * plibmHardwareVersion ) = 0;
    virtual HRESULT __stdcall get_ProtocolType (
        long liEncoderHND,
        long * pliProtocolType ) = 0;
    virtual HRESULT __stdcall get_SensorStatus (
        long liEncoderHND,
        long * plibmSensorStatus ) = 0;
    virtual HRESULT __stdcall get_SerialNumber (
        long liEncoderHND,
        BSTR * pbstrSerialNumber ) = 0;
    virtual HRESULT __stdcall get_AutoZero (
        long liChannelHND,
        float * pfSeconds ) = 0;
    virtual HRESULT __stdcall put_AutoZero (
        long liChannelHND,
        float pfSeconds ) = 0;
    virtual HRESULT __stdcall get_ChannelActive (
        long liChannelHND,
        long * pbActive ) = 0;
    virtual HRESULT __stdcall put_ChannelActive (
        long liChannelHND,
        long pbActive ) = 0;
    virtual HRESULT __stdcall get_ChannelEncoderHND (
        long liChannelHND,
        long * pliEncoderHND ) = 0;
    virtual HRESULT __stdcall get_ChannelPhysicalIndex (
        long liChannelHND,
        long * pliPhysicalIndex ) = 0;
    virtual HRESULT __stdcall get_NominalSampleRate (
        long liChannelHND,
        float * pfNominalSampleRate ) = 0;
    virtual HRESULT __stdcall get_Notification (
        long liChannelHND,
        long * pliNotification ) = 0;
    virtual HRESULT __stdcall put_Notification (
        long liChannelHND,
        long pliNotification ) = 0;
    virtual HRESULT __stdcall get_SamplesAvailable (
        long liChannelHND,
        long * pliSamplesAvailable ) = 0;
    virtual HRESULT __stdcall get_SensorConnected (
        long liChannelHND,
        long * pbSensorConnected ) = 0;
    virtual HRESULT __stdcall get_UnitType (
        long liChannelHND,
        long * pliUnitType ) = 0;
    virtual HRESULT __stdcall put_UnitType (
        long liChannelHND,
        long pliUnitType ) = 0;
    virtual HRESULT __stdcall RegisterClientThreadId (
        long liThreadHND ) = 0;
    virtual HRESULT __stdcall AssignEncoderHND (
        BSTR bstrSerialNumber,
        long liNewEncoderHND ) = 0;
    virtual HRESULT __stdcall CloseConnection (
        long liEncoderHND ) = 0;
    virtual HRESULT __stdcall CloseConnections ( ) = 0;
    virtual HRESULT __stdcall GetFirstEncoderHND (
        long * pliFirstEncoderHND ) = 0;
    virtual HRESULT __stdcall GetNextEncoderHND (
        long * pliNextEncoderHND ) = 0;
    virtual HRESULT __stdcall OpenConnection (
        BSTR bstrDeviceName,
        long liPollingInterval,
        long * liNewEncoderHND ) = 0;
    virtual HRESULT __stdcall OpenConnections (
        long libmCommand,
        long liPollingInterval,
        long * plibmScanned,
        long * plibmDetected ) = 0;
    virtual HRESULT __stdcall AddChannel (
        long liEncoderHND,
        long liPhysicalChannelIndex,
        long * pliChannelHND ) = 0;
    virtual HRESULT __stdcall AutoSetupChannels ( ) = 0;
    virtual HRESULT __stdcall DropChannel (
        long liChannelHND ) = 0;
    virtual HRESULT __stdcall DropChannels ( ) = 0;
    virtual HRESULT __stdcall GetFirstChannelHND (
        long * pliFirstChannelHND ) = 0;
    virtual HRESULT __stdcall GetNextChannelHND (
        long * pliNextChannelHND ) = 0;
    virtual HRESULT __stdcall ReadChannelData (
        long liChannelHND,
        float * pfBuffer,
        long * pliMaxSamples,
        long * pliResult ) = 0;
    virtual HRESULT __stdcall ReadChannelDataVT (
        long liChannelHND,
        long liMaxSamples,
        VARIANT * pvarBuffer ) = 0;
    virtual HRESULT __stdcall StartChannels ( ) = 0;
    virtual HRESULT __stdcall StopChannels ( ) = 0;
    virtual HRESULT __stdcall get_FirstChannelHND (
        long liEncoderHND,
        long * pliFirstChannelHND ) = 0;
    virtual HRESULT __stdcall put_FirstChannelHND (
        long liEncoderHND,
        long pliFirstChannelHND ) = 0;
    virtual HRESULT __stdcall get_EncoderID (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_NotificationMask (
        long * pliMask ) = 0;
    virtual HRESULT __stdcall put_NotificationMask (
        long pliMask ) = 0;
    virtual HRESULT __stdcall get_EventInsertionMask (
        long liChannelHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_EventInsertionMask (
        long liChannelHND,
        long pVal ) = 0;
    virtual HRESULT __stdcall get_SensorID (
        long liChannelHND,
        long * pliSensorID ) = 0;
    virtual HRESULT __stdcall get_SensorState (
        long liChannelHND,
        long * pliSensorState ) = 0;
    virtual HRESULT __stdcall get_EncoderState (
        long liEncoderHND,
        long * pliEncoderState ) = 0;
    virtual HRESULT __stdcall get_ForceSensor (
        long liChannelHND,
        long * pbForceSensor ) = 0;
    virtual HRESULT __stdcall put_ForceSensor (
        long liChannelHND,
        long pbForceSensor ) = 0;
    virtual HRESULT __stdcall get_ChannelOffset (
        long liChannelHND,
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_ChannelOffset (
        long liChannelHND,
        float pVal ) = 0;
    virtual HRESULT __stdcall get_SensorType (
        long liChannelHND,
        long * pliSensorType ) = 0;
    virtual HRESULT __stdcall put_SensorType (
        long liChannelHND,
        long pliSensorType ) = 0;
    virtual HRESULT __stdcall get_ImpCheckType (
        long * pliImpCheckType ) = 0;
    virtual HRESULT __stdcall put_ImpCheckType (
        long pliImpCheckType ) = 0;
    virtual HRESULT __stdcall get_ImpCheckAge (
        long liChannelHND,
        float * pfImpCheckAge ) = 0;
    virtual HRESULT __stdcall get_ImpCheckResults (
        long liChannelHND,
        long liResultIndex,
        float * pfImpCheckResult ) = 0;
    virtual HRESULT __stdcall StartRecord (
        long liEncoderHND,
        BSTR bstrFilename ) = 0;
    virtual HRESULT __stdcall StopRecord (
        long liEncoderHND ) = 0;
    virtual HRESULT __stdcall get_EncoderTime (
        long liEncoderHND,
        DATE * pVal ) = 0;
    virtual HRESULT __stdcall get_EncoderTimeAdjustment (
        long liEncoderHND,
        DATE * pVal ) = 0;
    virtual HRESULT __stdcall get_PlaybackMode (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_PlaybackMode (
        long liEncoderHND,
        long pVal ) = 0;
    virtual HRESULT __stdcall get_PlaybackStart (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_PlaybackStart (
        long liEncoderHND,
        long pVal ) = 0;
    virtual HRESULT __stdcall get_PlaybackEnd (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_PlaybackEnd (
        long liEncoderHND,
        long pVal ) = 0;
    virtual HRESULT __stdcall get_PlaybackPosition (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_PlaybackPosition (
        long liEncoderHND,
        long pVal ) = 0;
    virtual HRESULT __stdcall get_PlaybackSpeed (
        long liEncoderHND,
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_PlaybackSpeed (
        long liEncoderHND,
        float pVal ) = 0;
    virtual HRESULT __stdcall get_SwitchState (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_SwitchState (
        long liEncoderHND,
        long pVal ) = 0;
    virtual HRESULT __stdcall get_BatteryLevelVolt (
        long liEncoderHND,
        float * pVal ) = 0;
    virtual HRESULT __stdcall get_BatteryTimeLeft (
        long liEncoderHND,
        float * pVal ) = 0;
    virtual HRESULT __stdcall get_ChannelScale (
        long liChannelHND,
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_ChannelScale (
        long liChannelHND,
        float pVal ) = 0;
    virtual HRESULT __stdcall get_EventInputState (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_TickRate (
        long liEncoderHND,
        float * pVal ) = 0;
    virtual HRESULT __stdcall get_DecryptionState (
        long liEncoderHND,
        long * pVal ) = 0;
    virtual HRESULT __stdcall UnlockDecryption (
        long liEncoderHND,
        long liUnlockValue ) = 0;
    virtual HRESULT __stdcall put_EncoderModelType (
        long liEncoderHND,
        long pliEncoderModelType ) = 0;
    virtual HRESULT __stdcall get_ProtocolName (
        long liEncoderHND,
        BSTR * pbstrProtocolName ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_TTLLiveCtrlLib =
    {0xea85d9b2,0xb3f3,0x43f4,{0xad,0xf5,0x25,0x66,0x69,0xa8,0x3d,0x06}};
extern "C" const GUID __declspec(selectany) DIID__ITTLLiveEvents =
    {0xb8bf3523,0x0a10,0x44ad,{0x9e,0xf5,0xf1,0x6a,0x02,0xea,0x9f,0xb1}};
extern "C" const GUID __declspec(selectany) CLSID_TTLLive =
    {0x897b372a,0xf588,0x4143,{0xaa,0x5d,0x34,0x14,0xd1,0xdb,0xc4,0x2e}};
extern "C" const GUID __declspec(selectany) IID_ITTLLive =
    {0x5037f1e7,0x3676,0x4306,{0x8c,0x82,0x23,0xdc,0x12,0x13,0x30,0x98}};

#pragma pack(pop)
