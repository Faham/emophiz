// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ttllive.h"

/////////////////////////////////////////////////////////////////////////////
// CTTLLive

IMPLEMENT_DYNCREATE(CTTLLive, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CTTLLive properties

/////////////////////////////////////////////////////////////////////////////
// CTTLLive operations

long CTTLLive::GetEncoderCount()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CTTLLive::GetChannelCount()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CTTLLive::GetVersion()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

float CTTLLive::GetBatteryLevelPct(long liEncoderHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

CString CTTLLive::GetConnectionName(long liEncoderHND)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetConnectionType(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetEncoderChannelCount(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

CString CTTLLive::GetEncoderModelName(long liEncoderHND)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetEncoderModelType(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetFirmwareVersion(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetHardwareVersion(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetProtocolType(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetSensorStatus(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

CString CTTLLive::GetSerialNumber(long liEncoderHND)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		liEncoderHND);
	return result;
}

float CTTLLive::GetAutoZero(long liChannelHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetAutoZero(long liChannelHND, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, newValue);
}

long CTTLLive::GetChannelActive(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetChannelActive(long liChannelHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, nNewValue);
}

long CTTLLive::GetChannelEncoderHND(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

long CTTLLive::GetChannelPhysicalIndex(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

float CTTLLive::GetNominalSampleRate(long liChannelHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liChannelHND);
	return result;
}

long CTTLLive::GetNotification(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetNotification(long liChannelHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, nNewValue);
}

long CTTLLive::GetSamplesAvailable(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

long CTTLLive::GetSensorConnected(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

long CTTLLive::GetUnitType(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetUnitType(long liChannelHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, nNewValue);
}

void CTTLLive::RegisterClientThreadId(long liThreadHND)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 liThreadHND);
}

void CTTLLive::AssignEncoderHND(LPCTSTR bstrSerialNumber, long liNewEncoderHND)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrSerialNumber, liNewEncoderHND);
}

void CTTLLive::CloseConnection(long liEncoderHND)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 liEncoderHND);
}

void CTTLLive::CloseConnections()
{
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CTTLLive::GetFirstEncoderHND()
{
	long result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CTTLLive::GetNextEncoderHND()
{
	long result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CTTLLive::OpenConnection(LPCTSTR bstrDeviceName, long liPollingInterval)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bstrDeviceName, liPollingInterval);
	return result;
}

void CTTLLive::OpenConnections(long libmCommand, long liPollingInterval, long* plibmScanned, long* plibmDetected)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 libmCommand, liPollingInterval, plibmScanned, plibmDetected);
}

void CTTLLive::AddChannel(long liEncoderHND, long liPhysicalChannelIndex, long* pliChannelHND)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 liEncoderHND, liPhysicalChannelIndex, pliChannelHND);
}

void CTTLLive::AutoSetupChannels()
{
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CTTLLive::DropChannel(long liChannelHND)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 liChannelHND);
}

void CTTLLive::DropChannels()
{
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CTTLLive::GetFirstChannelHND()
{
	long result;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CTTLLive::GetNextChannelHND()
{
	long result;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CTTLLive::ReadChannelData(long liChannelHND, float* pfBuffer, long* pliMaxSamples)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PR4 VTS_PI4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		liChannelHND, pfBuffer, pliMaxSamples);
	return result;
}

VARIANT CTTLLive::ReadChannelDataVT(long liChannelHND, long liMaxSamples)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		liChannelHND, liMaxSamples);
	return result;
}

void CTTLLive::StartChannels()
{
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CTTLLive::StopChannels()
{
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CTTLLive::GetFirstChannelHND(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::SetFirstChannelHND(long liEncoderHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, nNewValue);
}

long CTTLLive::GetEncoderID(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetNotificationMask()
{
	long result;
	InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CTTLLive::SetNotificationMask(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CTTLLive::GetEventInsertionMask(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetEventInsertionMask(long liChannelHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, nNewValue);
}

long CTTLLive::GetSensorID(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

long CTTLLive::GetSensorState(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

long CTTLLive::GetEncoderState(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetForceSensor(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetForceSensor(long liChannelHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x31, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, nNewValue);
}

float CTTLLive::GetChannelOffset(long liChannelHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetChannelOffset(long liChannelHND, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x32, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, newValue);
}

long CTTLLive::GetSensorType(long liChannelHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetSensorType(long liChannelHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, nNewValue);
}

long CTTLLive::GetImpCheckType()
{
	long result;
	InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CTTLLive::SetImpCheckType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x36, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

float CTTLLive::GetImpCheckAge(long liChannelHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x37, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liChannelHND);
	return result;
}

float CTTLLive::GetImpCheckResults(long liChannelHND, long liResultIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x38, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liChannelHND, liResultIndex);
	return result;
}

void CTTLLive::StartRecord(long liEncoderHND, LPCTSTR bstrFilename)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 liEncoderHND, bstrFilename);
}

void CTTLLive::StopRecord(long liEncoderHND)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 liEncoderHND);
}

DATE CTTLLive::GetEncoderTime(long liEncoderHND)
{
	DATE result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, parms,
		liEncoderHND);
	return result;
}

DATE CTTLLive::GetEncoderTimeAdjustment(long liEncoderHND)
{
	DATE result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetPlaybackMode(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::SetPlaybackMode(long liEncoderHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, nNewValue);
}

long CTTLLive::GetPlaybackStart(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::SetPlaybackStart(long liEncoderHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, nNewValue);
}

long CTTLLive::GetPlaybackEnd(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::SetPlaybackEnd(long liEncoderHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, nNewValue);
}

long CTTLLive::GetPlaybackPosition(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x40, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::SetPlaybackPosition(long liEncoderHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x40, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, nNewValue);
}

float CTTLLive::GetPlaybackSpeed(long liEncoderHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x41, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::SetPlaybackSpeed(long liEncoderHND, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, newValue);
}

long CTTLLive::GetSwitchState(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x42, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::SetSwitchState(long liEncoderHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x42, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, nNewValue);
}

float CTTLLive::GetBatteryLevelVolt(long liEncoderHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x43, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

float CTTLLive::GetBatteryTimeLeft(long liEncoderHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x44, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

float CTTLLive::GetChannelScale(long liChannelHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x45, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liChannelHND);
	return result;
}

void CTTLLive::SetChannelScale(long liChannelHND, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x45, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liChannelHND, newValue);
}

long CTTLLive::GetEventInputState(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x46, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

float CTTLLive::GetTickRate(long liEncoderHND)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

long CTTLLive::GetDecryptionState(long liEncoderHND)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		liEncoderHND);
	return result;
}

void CTTLLive::UnlockDecryption(long liEncoderHND, long liUnlockValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 liEncoderHND, liUnlockValue);
}

void CTTLLive::SetEncoderModelType(long liEncoderHND, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 liEncoderHND, nNewValue);
}

CString CTTLLive::GetProtocolName(long liEncoderHND)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		liEncoderHND);
	return result;
}
